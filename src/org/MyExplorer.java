/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MyExplorer.java
 *
 * Created on Apr 5, 2012, 3:22:07 PM
 */
/**
 * these class simulate the EMC-square Atmos server in a TIEC Atmos server that have the ability to connect to a server then upload to , download from server and delete files from server and get the client metaData file
 * and have some system tools like encrypt and compress files and folders and store theme in the server in these case and create sub folders
 */
package org;

import java.io.*;
import java.util.ArrayList;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.*;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;

/**
 *
 * @author Eng.MohamedKamel
 */
public class MyExplorer extends javax.swing.JFrame {

    public String host = "";
    public String user = "";
    public String password = "";
    public int port = -1;
    public String sDir = "";
    Locale local = null;
    ResourceBundle rb = null;
    DefaultListModel model = null;
    private ArrayList<String> FTPDirectoryList = new ArrayList<>();

    /** 
     * Creates new form MyExplorer (Constructor of the class) that handles also the 
     * look and feel of the main project frame
     */
    public MyExplorer() {
        try {
            UIManager.setLookAndFeel("com.birosoft.liquid.LiquidLookAndFeel");
            initComponents();
            this.setResizable(true);
            this.setLocationRelativeTo(null);
            jFileChooser1.setControlButtonsAreShown(false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jFileChooser1 = new javax.swing.JFileChooser();
        Upload_Btn = new javax.swing.JButton();
        Download_Btn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        MedataData_BTN = new javax.swing.JButton();
        SDelete_Btn = new javax.swing.JButton();
        MkDirBtn = new javax.swing.JButton();
        SRename_BTN = new javax.swing.JButton();
        SOpenDir_BTN = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Host_TXT = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        UName_TXT = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Pass_TXT = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        Port_TXT = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel6 = new javax.swing.JPanel();
        FileName_TXT = new javax.swing.JLabel();
        FileSize_TXT = new javax.swing.JLabel();
        FileModification_TXT = new javax.swing.JLabel();
        FileType_TXT = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TIEC Atmos");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Local Disk"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
        );

        Upload_Btn.setText(">>");
        Upload_Btn.setEnabled(false);
        Upload_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Upload_BtnActionPerformed(evt);
            }
        });

        Download_Btn.setText("<<");
        Download_Btn.setEnabled(false);
        Download_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Download_BtnActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Tiec Atmos Storage"));

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setCellRenderer(new CellModelRender());
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                .addContainerGap())
        );

        MedataData_BTN.setText("Get  MetaData");
        MedataData_BTN.setEnabled(false);
        MedataData_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MedataData_BTNActionPerformed(evt);
            }
        });

        SDelete_Btn.setText("Delete  From Server");
        SDelete_Btn.setEnabled(false);
        SDelete_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SDelete_BtnActionPerformed(evt);
            }
        });

        MkDirBtn.setText("Create New Folder");
        MkDirBtn.setEnabled(false);
        MkDirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MkDirBtnActionPerformed(evt);
            }
        });

        SRename_BTN.setText("Rename");
        SRename_BTN.setEnabled(false);
        SRename_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SRename_BTNActionPerformed(evt);
            }
        });

        SOpenDir_BTN.setText("Open Dir");
        SOpenDir_BTN.setEnabled(false);
        SOpenDir_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SOpenDir_BTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Download_Btn, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                    .addComponent(Upload_Btn, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MkDirBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                    .addComponent(SDelete_Btn, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                    .addComponent(SOpenDir_BTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                    .addComponent(SRename_BTN, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                    .addComponent(MedataData_BTN, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(Upload_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(Download_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(SOpenDir_BTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MkDirBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SDelete_Btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MedataData_BTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SRename_BTN)))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("FTP Connection Wizard"));

        jLabel1.setText("Host");

        Host_TXT.setText("127.0.0.1");

        jLabel2.setText("Username");

        UName_TXT.setText("Cloud123");

        jLabel3.setText("Password");

        Pass_TXT.setText("141188fciit");

        jLabel4.setText("Port no.");

        Port_TXT.setText("21");

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/blue_plus1.PNG"))); // NOI18N
        jButton3.setText("Connect");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Host_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(UName_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Pass_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Port_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(309, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(Host_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(UName_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(Pass_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Port_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("File MetaData"));

        FileName_TXT.setText("File name : ");
        FileName_TXT.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        FileSize_TXT.setText("File size : ");
        FileSize_TXT.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        FileModification_TXT.setText("Modification date : ");
        FileModification_TXT.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        FileType_TXT.setText("Type : ");
        FileType_TXT.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FileSize_TXT, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                    .addComponent(FileName_TXT, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(FileType_TXT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FileModification_TXT, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FileName_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FileType_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FileModification_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FileSize_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jMenu1.setText("File");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem2.setText("Arabic");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem3.setText("English");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * these method is try to open a connection between the client and server
     * @exception : error in connecting
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        connect();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * perform the system downloading from the server
     */
    private void Download_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Download_BtnActionPerformed
        downloading();
    }//GEN-LAST:event_Download_BtnActionPerformed

    /**
     * perform the system uploading to the server
     */
    private void Upload_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Upload_BtnActionPerformed
        uploading();
    }//GEN-LAST:event_Upload_BtnActionPerformed

    /**
     * perform the system delete from the server
     */
    private void SDelete_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SDelete_BtnActionPerformed
        deleteFromServer();
    }//GEN-LAST:event_SDelete_BtnActionPerformed

    /**
     * make sub directory under the current server directory
     */
    private void MkDirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MkDirBtnActionPerformed
        try {
            JTextField textField = new JTextField();
            JOptionPane.showMessageDialog(null, textField, "enter the name of the directory", JOptionPane.QUESTION_MESSAGE);
            String DirName = textField.getText();
            makeNewDir(DirName);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Internal Server Error", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_MkDirBtnActionPerformed

    /**
     * these method perform the action of get file metaData button like (name , 
     * size , path , last modification date , owner , type)
     */
    private void MedataData_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MedataData_BTNActionPerformed
        getMetaData();
    }//GEN-LAST:event_MedataData_BTNActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        local = new Locale("ar", "EG");
        rb = ResourceBundle.getBundle("org/Bundle_ar_EG", local);
        this.setTitle(rb.getString("MyExplorer.Title"));
        jLabel1.setText(rb.getString("MyExplorer.Host"));
        jLabel2.setText(rb.getString("MyExplorer.UserName"));
        jLabel3.setText(rb.getString("MyExplorer.Password"));
        jLabel4.setText(rb.getString("MyExplorer.port"));
        jButton3.setText(rb.getString("MyExplorer.Connect"));
        MedataData_BTN.setText(rb.getString("MyExplorer.Meta"));
        SDelete_Btn.setText(rb.getString("MyExplorer.Delete"));
        MkDirBtn.setText(rb.getString("MyExplorer.Create"));
        FileName_TXT.setText(rb.getString("MyExplorer.Fname"));
        FileSize_TXT.setText(rb.getString("MyExplorer.Fsize"));
        FileModification_TXT.setText(rb.getString("MyExplorer.MDate"));
        FileType_TXT.setText(rb.getString("MyExplorer.FileType"));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(rb.getString("MyExplorer.panel2")));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(rb.getString("MyExplorer.panel3")));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(rb.getString("MyExplorer.panel4")));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(rb.getString("MyExplorer.panel6")));
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        local = new Locale("en", "US");
        rb = ResourceBundle.getBundle("org/Bundle", local);
        this.setTitle(rb.getString("MyExplorer.Title"));
        jLabel1.setText(rb.getString("MyExplorer.Host"));
        jLabel2.setText(rb.getString("MyExplorer.UserName"));
        jLabel3.setText(rb.getString("MyExplorer.Password"));
        jLabel4.setText(rb.getString("MyExplorer.port"));
        jButton3.setText(rb.getString("MyExplorer.Connect"));
        MedataData_BTN.setText(rb.getString("MyExplorer.Meta"));
        SDelete_Btn.setText(rb.getString("MyExplorer.Delete"));
        MkDirBtn.setText(rb.getString("MyExplorer.Create"));
        FileName_TXT.setText(rb.getString("MyExplorer.Fname"));
        FileSize_TXT.setText(rb.getString("MyExplorer.Fsize"));
        FileModification_TXT.setText(rb.getString("MyExplorer.MDate"));
        FileType_TXT.setText(rb.getString("MyExplorer.FileType"));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(rb.getString("MyExplorer.panel2")));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(rb.getString("MyExplorer.panel3")));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(rb.getString("MyExplorer.panel4")));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(rb.getString("MyExplorer.panel6")));
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void SRename_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SRename_BTNActionPerformed
        try {
            if (jList1.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(null, "please choose your file first", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                FTPClient client = new FTPClient();
                client.connect(host, Integer.parseInt(Port_TXT.getText()));
                client.login(user, password);
                JTextField textField = new JTextField();
                JOptionPane.showMessageDialog(null, textField, "enter the new name", JOptionPane.QUESTION_MESSAGE);
                JLabel tempLabel = (JLabel) jList1.getSelectedValue();
                String nameTempfile = tempLabel.getText();
                client.rename(nameTempfile, textField.getText());
                client.disconnect();
                getListFilesAndFolders();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Internal Server Error", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SRename_BTNActionPerformed

    private void SOpenDir_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SOpenDir_BTNActionPerformed
        try {
            if (jList1.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(null, "please choose a directory", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                FTPClient ftp = new FTPClient();
                ftp.connect(host, port);
                ftp.login(user, password);
                JLabel tempLabel = (JLabel) jList1.getSelectedValue();
                String nameTempDirectory = tempLabel.getText();
                if (sDir.isEmpty()) {
                    sDir = nameTempDirectory;
                    ftp.changeWorkingDirectory(sDir);
                } else {
                    sDir = sDir + "/" + nameTempDirectory;
                    ftp.changeWorkingDirectory(sDir);
                }
                listOfFilesAndFolders.clear();
                FTPFile[] ftpfilelist = ftp.listFiles();
                listOfFilesAndFolders.add(createFolderLabel(".."));
                for (FTPFile file : ftpfilelist) {
                    if ((file.getName().equals(".") || file.getName().equals("..")) == false) {
                        if (file.isDirectory()) {
                            FTPDirectoryList.add(file.getName());
                            listOfFilesAndFolders.add(createFolderLabel(file.getName()));
                        } else {
                            listOfFilesAndFolders.add(createFileLabel(file.getName()));
                        }
                    }
                }
                jList1.setListData(listOfFilesAndFolders.toArray());
                jList1.updateUI();
                ftp.logout();
                ftp.disconnect();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SOpenDir_BTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MyExplorer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton Download_Btn;
    private javax.swing.JLabel FileModification_TXT;
    private javax.swing.JLabel FileName_TXT;
    private javax.swing.JLabel FileSize_TXT;
    private javax.swing.JLabel FileType_TXT;
    private javax.swing.JTextField Host_TXT;
    public javax.swing.JButton MedataData_BTN;
    public javax.swing.JButton MkDirBtn;
    private javax.swing.JPasswordField Pass_TXT;
    private javax.swing.JTextField Port_TXT;
    public javax.swing.JButton SDelete_Btn;
    private javax.swing.JButton SOpenDir_BTN;
    private javax.swing.JButton SRename_BTN;
    private javax.swing.JTextField UName_TXT;
    public javax.swing.JButton Upload_Btn;
    public javax.swing.JButton jButton3;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
    private final ArrayList listOfFilesAndFolders = new ArrayList();

    /**
     * these method perform the details of the uploading
     * 1-choosing file from client
     * 2-open connection to the server
     * 3-locate the file path and name on the server
     * 4-upload the file
     * @exception : error in uploading
     */
    public void uploading() {
        if (jFileChooser1.getSelectedFile() == null) {
            JOptionPane.showMessageDialog(null, "please choose your file first", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            InputStream is = null;
            File tmpFile = null;
            try {
                String targetFile = jFileChooser1.getSelectedFile().getName();
                //////////////Compression////////////////
                Zipper zipper = new Zipper();
                zipper.setImageFolderPath(jFileChooser1.getSelectedFile().getPath());
                tmpFile = File.createTempFile("Atmos", jFileChooser1.getSelectedFile().getName() + ".rar");
                zipper.setZipFilePath(tmpFile.getPath());
                zipper.zipEm();
                targetFile = targetFile + ".rar";
                is = new FileInputStream(tmpFile);
                //////////////EndCompression////////////////
                ////////////////Encryption//////////////
                String secretKeyPath = "/home/abousamra/Desktop/TiecDocsEnc/mkk.p12";
                FileInputStream PlainFile = null;
                File encTmpFile = null;
                targetFile = jFileChooser1.getSelectedFile().getName() + ".rarEnc";
                encTmpFile = File.createTempFile("Atmos", jFileChooser1.getSelectedFile().getName() + ".rarEnc");
                PlainFile = new FileInputStream(tmpFile);
                byte[] arr = new byte[PlainFile.available()];
                PlainFile.read(arr);
                FileInputStream FIS = new FileInputStream(new File(secretKeyPath));
                byte[] keyEncoded = new byte[FIS.available()];
                FIS.read(keyEncoded);
                SecretKeySpec key = new SecretKeySpec(keyEncoded, "AES");
                Cipher cipher = Cipher.getInstance("AES");
                cipher.init(Cipher.ENCRYPT_MODE, key);
                byte[] cipherArr = cipher.doFinal(arr);
                FileOutputStream FOS = new FileOutputStream(encTmpFile);
                FOS.write(cipherArr);
                FOS.flush();
                FOS.close();
                is = new FileInputStream(encTmpFile);
                ////////////////EndEncryption//////////////
                FTPClient client = new FTPClient();
                client.connect(host, Integer.parseInt(Port_TXT.getText()));
                client.login(user, password);
                client.enterLocalPassiveMode();
                client.setFileType(FTPClient.BINARY_FILE_TYPE);
                client.setBufferSize(1024);
                if (!sDir.isEmpty()) {
                    System.out.println(sDir + "/" + targetFile);
                    targetFile = sDir + "/" + targetFile;
                }
                client.storeFile(targetFile, is);
                is.close();
                client.logout();
                client.disconnect();
                getListFilesAndFolders();
            } catch (Exception ex) {
                StringWriter sw0 = new StringWriter();
                PrintWriter p0 = new PrintWriter(sw0, true);
                ex.printStackTrace(p0);
                String erMesg = sw0.getBuffer().toString();
                JOptionPane.showMessageDialog(null, "Error in uploading\n" + erMesg, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * these method perform the details of the downloading
     * 1-open connection to the server
     * 2-choosing file from server
     * 3-locate the file path and name on the client
     * 4-download the file
     * @exception : error in downloading
     */
    public void downloading() {
        if (jList1.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(null, "please choose your file first", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                if (FTPDirectoryList.contains(jList1.getSelectedValue().toString())) {
                    JOptionPane.showMessageDialog(null, "files only", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                JLabel tempLabel = (JLabel) jList1.getSelectedValue();
                String nameTempfile = tempLabel.getText();
                String targetFile = jFileChooser1.getCurrentDirectory().getPath() + "/" + nameTempfile;
                OutputStream os = new FileOutputStream(targetFile);
                FTPClient client = new FTPClient();
                client.connect(host, Integer.parseInt(Port_TXT.getText()));
                client.login(user, password);
                client.retrieveFile(jList1.getSelectedValue().toString(), os);
                os.flush();
                os.close();
                client.logout();
                client.disconnect();
                jFileChooser1.updateUI();
            } catch (Exception ex) {
                StringWriter sw0 = new StringWriter();
                PrintWriter p0 = new PrintWriter(sw0, true);
                ex.printStackTrace(p0);
                String erMesg = sw0.getBuffer().toString();
                JOptionPane.showMessageDialog(null, "Error in uploading\n" + erMesg, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * these method perform the details of the deleting file from server
     * 1-open connection to the server
     * 2-choosing file from server
     * 4-delete the file
     * @exception : internal server error
     */
    public void deleteFromServer() {
        if (jList1.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(null, "please choose your file first", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                FTPClient client = new FTPClient();
                client.connect(host, Integer.parseInt(Port_TXT.getText()));
                client.login(user, password);
                JLabel tempLabel = (JLabel) jList1.getSelectedValue();
                String nameTempfile = tempLabel.getText();
                client.removeDirectory(nameTempfile);
                client.deleteFile(nameTempfile);
                if (FTPDirectoryList.contains(nameTempfile)) {
                    FTPDirectoryList.remove(nameTempfile);
                }
                client.disconnect();
                getListFilesAndFolders();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Internal Server Error", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * these method perform the details of the creating folder on the server
     * 1-open connection to the server
     * 2-choosing parent folder path
     * 3-create sub folder
     * @exception : internal server error
     */
    public void makeNewDir(String Path) {
        try {
            FTPClient client = new FTPClient();
            client.connect(host, Integer.parseInt(Port_TXT.getText()));
            client.login(user, password);
            client.makeDirectory(Path);
            client.disconnect();
            getListFilesAndFolders();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Internal Server Error", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * these method perform the action of get file metaData button like (name , size , path , last modification date , owner , type)
     */
    public void getMetaData() {
        if (jList1.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "please choose your file first", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                FTPClient client = new FTPClient();
                client.connect(host, Integer.parseInt(Port_TXT.getText()));
                client.login(user, password);
                JLabel tempLabel = (JLabel) jList1.getSelectedValue();
                String nameTempfile = tempLabel.getText();
                if (!sDir.isEmpty()) {
                    nameTempfile = sDir + "/" + nameTempfile;
                }

                System.out.println("1- " + nameTempfile);
                FTPFile ftpFile = client.mlistFile(nameTempfile);
                System.out.println("2- " + ftpFile);
                System.out.println("3- " + ftpFile.getName());
                FileType_TXT.setText(ftpFile.getName().split(";")[0]);
                if (ftpFile.getName().split(";")[0].contains("dir")) {
                    FileSize_TXT.setText("");
                    FileModification_TXT.setText(ftpFile.getName().split(";")[1]);
                    FileName_TXT.setText("name: " + ftpFile.getName().split(";")[2]);
                } else {
                    FileSize_TXT.setText(ftpFile.getName().split(";")[1] + " byte(s)");
                    FileModification_TXT.setText(ftpFile.getName().split(";")[2]);
                    FileName_TXT.setText("name: " + ftpFile.getName().split(";")[3]);
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * these method is try to open a connection between the client and server
     * @exception : error in connecting
     */
    public void connect() {
        try {
            host = Host_TXT.getText();
            user = UName_TXT.getText();
            password = new String(Pass_TXT.getPassword());
            port = Integer.parseInt(Port_TXT.getText());
            FTPClient ftp = new FTPClient();
            ftp.connect(host, port);
            ftp.login(user, password);
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                JOptionPane.showMessageDialog(null, "Error in connecting", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            FTPFile[] ftpfilelist = ftp.listFiles();
            listOfFilesAndFolders.add(createFolderLabel(".."));
            for (FTPFile file : ftpfilelist) {
                if ((file.getName().equals(".") || file.getName().equals("..")) == false) {
                    if (file.isDirectory()) {
                        FTPDirectoryList.add(file.getName());
                        listOfFilesAndFolders.add(createFolderLabel(file.getName()));
                    } else {
                        listOfFilesAndFolders.add(createFileLabel(file.getName()));
                    }
                }
            }
            jList1.setListData(listOfFilesAndFolders.toArray());
            ftp.logout();
            ftp.disconnect();
            Upload_Btn.setEnabled(true);
            Download_Btn.setEnabled(true);
            SDelete_Btn.setEnabled(true);
            MkDirBtn.setEnabled(true);
            SRename_BTN.setEnabled(true);
            SOpenDir_BTN.setEnabled(true);
            MedataData_BTN.setEnabled(true);
            jList1.updateUI();
            listOfFilesAndFolders.clear();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error in connecting", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private JLabel createFolderLabel(final String text) {
        JLabel label = new JLabel();
        label.setIcon(new ImageIcon(this.getClass().getResource("/res/dir.png")));
        label.setText(text);
        return label;
    }

    private JLabel createFileLabel(String text) {
        JLabel label = new JLabel();
        label.setIcon(new ImageIcon(this.getClass().getResource("/res/file.PNG")));
        label.setText(text);
        label.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
            }
        });
        return label;
    }

    private void getListFilesAndFolders() {
        try {
            listOfFilesAndFolders.clear();
            FTPClient ftp = new FTPClient();
            ftp.connect(host, port);
            ftp.login(user, password);
            ftp.changeWorkingDirectory(sDir);
            FTPFile[] ftpfilelist = ftp.listFiles();
            listOfFilesAndFolders.add(createFolderLabel(".."));
            for (FTPFile file : ftpfilelist) {
                if ((file.getName().equals(".") || file.getName().equals("..")) == false) {
                    if (file.isDirectory()) {
                        FTPDirectoryList.add(file.getName());
                        listOfFilesAndFolders.add(createFolderLabel(file.getName()));
                    } else {
                        listOfFilesAndFolders.add(createFileLabel(file.getName()));
                    }
                }
            }
            jList1.setListData(listOfFilesAndFolders.toArray());
            ftp.logout();
            ftp.disconnect();
            jList1.updateUI();
            listOfFilesAndFolders.clear();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error in connecting", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
